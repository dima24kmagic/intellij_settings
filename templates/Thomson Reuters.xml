<templateSet group="Thomson Reuters">
  <template name="rch" value="import React from &quot;react&quot;;&#10;import { elementAttributesToProps } from &quot;@dcl/rehydrate&quot;;&#10;import $COMPONENT_NAME$ from &quot;./$COMPONENT_NAME$&quot;;&#10;import { I$COMPONENT_NAME$Props } from &quot;./$COMPONENT_NAME$.types&quot;;&#10;&#10;export const rehydrator = async domNode =&gt; {&#10;  const props = elementAttributesToProps(domNode) as I$COMPONENT_NAME$Props;&#10;&#10;  return &lt;$COMPONENT_NAME$ {...props} /&gt;;&#10;};&#10;&#10;export default rehydrator;&#10;" description="React Component Rehydrator" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="recs" value="import React from &quot;react&quot;;&#10;import { storiesOf } from &quot;@storybook/react&quot;;&#10;import { withKnobs } from &quot;@storybook/addon-knobs&quot;;&#10;import $COMPONENT_NAME$ from &quot;./$COMPONENT_NAME$&quot;;&#10;import { I$COMPONENT_NAME$Props } from &quot;./$COMPONENT_NAME$.types&quot;;&#10;import &quot;./$COMPONENT_NAME$.css&quot;;&#10;&#10;const stories = storiesOf(&quot;Bundle-UE/$COMPONENT_NAME$&quot;, module);&#10;stories.addDecorator(withKnobs);&#10;&#10;const props: I$COMPONENT_NAME$Props = {&#10;};&#10;&#10;stories.add(&quot;Default&quot;, () =&gt; &lt;$COMPONENT_NAME$ {...props} /&gt;);&#10;" description="React component story" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rcrc" value="import React from &quot;react&quot;;&#10;import { propsToDataAttributes } from &quot;@dcl/rehydrate&quot;;&#10;import { I$COMPONENT_NAME$ContainerProps } from &quot;./$COMPONENT_NAME$Container.types&quot;;&#10;import $COMPONENT_NAME$ from &quot;../$COMPONENT_NAME$&quot;;&#10;import { getRehydratableName } from &quot;@dcl/ui&quot;;&#10;&#10;const $COMPONENT_NAME$Container = (props: I$COMPONENT_NAME$ContainerProps) =&gt; {&#10;  const dataAttributes = propsToDataAttributes(props);&#10;&#10;  return (&#10;      &lt;div&#10;        data-rehydratable={getRehydratableName(&#10;          $COMPONENT_NAME$Container.displayName&#10;        )}&#10;        {...dataAttributes}&#10;      &gt;&#10;        &lt;$COMPONENT_NAME$ /&gt;&#10;      &lt;/div&gt;&#10;  );&#10;};&#10;&#10;$COMPONENT_NAME$Container.displayName = &quot;$COMPONENT_NAME$Container&quot;;&#10;&#10;export default $COMPONENT_NAME$Container;&#10;export { $COMPONENT_NAME$Container };&#10;" description="react component rehydrator container" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>